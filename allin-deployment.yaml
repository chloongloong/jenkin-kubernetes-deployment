apiVersion: v1
kind: Namespace
metadata:
  name: test-react-ap

---
# In GKE need to get RBAC permissions first with
# kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin [--user=<user-name>|--group=<group-name>]
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: test-react-app

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: test-react-app
  namespace: test-react-app
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: test-react-app
  namespace: test-react-app
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: test-react-app
subjects:
- kind: ServiceAccount
  name: default

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment #The name of the Kubernetes Deployment to be created in the Kubernetes cluster
  namespace: test-react-app
  labels:
    app: react-app
spec:
  replicas: 2 #The number of pods to be created in the Kubernetes cluster for the React.js application container
  selector:
    matchLabels:
      app: react-app
  template:
    metadata:
      labels:
        app: react-app 
    spec:
      containers:
      - name: react-app #The name of the react.js application container
        #image: bravinwasike/react-app:latest #The Docker image for building the React.js application container
        image: chloong/hello-kaniko-react-app:latest #The Docker image for building the React.js application container
        ports:
        - containerPort: 3000 #The port for the React.js application   container

---          
apiVersion: v1
kind: Service
metadata:
  name: service #The name of the Kubernetes Service to be created in the Kubernetes cluster
  namespace: test-react-app
spec:
  selector:
    app: react-app 
  #type: LoadBalancer #Type of the Kubernetes Service
  type: NodePort #Type of the Kubernetes Service
  ports:
  - protocol: TCP
    nodePort: 30003
    port: 3000 #Service port
    targetPort: 3000 #The port for the React.js application container
